<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>EVANGELION</title>
  
  <subtitle>江畔何人初见月，江月何年初照人。</subtitle>
  <link href="https://lawliet-lee.github.io/atom.xml" rel="self"/>
  
  <link href="https://lawliet-lee.github.io/"/>
  <updated>2024-07-01T03:14:16.009Z</updated>
  <id>https://lawliet-lee.github.io/</id>
  
  <author>
    <name>Lawliet Lee</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="https://lawliet-lee.github.io/2024/07/01/test/"/>
    <id>https://lawliet-lee.github.io/2024/07/01/test/</id>
    <published>2024-07-01T03:08:24.195Z</published>
    <updated>2024-07-01T03:14:16.009Z</updated>
    
    <content type="html"><![CDATA[<p>测试一些数据</p><p>fatal: 无法访问 ‘<a href="https://github.com/lawliet-lee/lawliet-lee.github.io.git/&#39;%EF%BC%9AFailed">https://github.com/lawliet-lee/lawliet-lee.github.io.git/&#39;：Failed</a> to connect to github.com port 443 after 75002 ms: Couldn’t connect to server</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;测试一些数据&lt;/p&gt;
&lt;p&gt;fatal: 无法访问 ‘&lt;a href=&quot;https://github.com/lawliet-lee/lawliet-lee.github.io.git/&amp;#39;%EF%BC%9AFailed&quot;&gt;https://github.com/law</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>GO-交替输出数字和字母</title>
    <link href="https://lawliet-lee.github.io/2022/11/21/go-%E4%BA%A4%E6%9B%BF%E8%BE%93%E5%87%BA%E6%95%B0%E5%AD%97%E5%92%8C%E5%AD%97%E6%AF%8D/"/>
    <id>https://lawliet-lee.github.io/2022/11/21/go-%E4%BA%A4%E6%9B%BF%E8%BE%93%E5%87%BA%E6%95%B0%E5%AD%97%E5%92%8C%E5%AD%97%E6%AF%8D/</id>
    <published>2022-11-21T08:59:53.623Z</published>
    <updated>2022-11-21T09:07:47.165Z</updated>
    
    <content type="html"><![CDATA[<p>//12AB34CD56EF78GH910IJ1112KL1314MN1516OP1718QR1920ST2122UV2324WX2526YZ2728</p><p>第一种：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;sync&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> channel = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">bool</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line">wg.Add(<span class="number">2</span>)</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> wg.Done()</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt; <span class="number">29</span>; i++ &#123;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(channel) == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">fmt.Print(i)</span><br><span class="line"><span class="keyword">if</span> i%<span class="number">2</span> == <span class="number">0</span> &#123;</span><br><span class="line">channel &lt;- <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> wg.Done()</span><br><span class="line"><span class="keyword">for</span> i := <span class="string">&#x27;A&#x27;</span>; i &lt;= <span class="string">&#x27;Z&#x27;</span>; i++ &#123;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(channel) == <span class="number">1</span> &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">fmt.Print(<span class="type">string</span>(i))</span><br><span class="line"><span class="keyword">if</span> i%<span class="number">2</span> == <span class="number">0</span> &#123;</span><br><span class="line">&lt;-channel</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line">wg.Wait()</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>第二种：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;sync&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">letter, number := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">bool</span>), <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">bool</span>)</span><br><span class="line">wait := sync.WaitGroup&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">i := <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> &lt;-number:</span><br><span class="line">fmt.Print(i)</span><br><span class="line">i++</span><br><span class="line">fmt.Print(i)</span><br><span class="line">i++</span><br><span class="line">letter &lt;- <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line">wait.Add(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(wait *sync.WaitGroup)</span></span> &#123;</span><br><span class="line">i := <span class="string">&#x27;A&#x27;</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> &lt;-letter:</span><br><span class="line"><span class="keyword">if</span> i &gt;= <span class="string">&#x27;Z&#x27;</span> &#123;</span><br><span class="line">wait.Done()</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Print(<span class="type">string</span>(i))</span><br><span class="line">i++</span><br><span class="line">fmt.Print(<span class="type">string</span>(i))</span><br><span class="line">i++</span><br><span class="line">number &lt;- <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;(&amp;wait)</span><br><span class="line">number &lt;- <span class="literal">true</span></span><br><span class="line">wait.Wait()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;//12AB34CD56EF78GH910IJ1112KL1314MN1516OP1718QR1920ST2122UV2324WX2526YZ2728&lt;/p&gt;
&lt;p&gt;第一种：&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td c</summary>
      
    
    
    
    <category term="GO" scheme="https://lawliet-lee.github.io/categories/GO/"/>
    
    
  </entry>
  
  <entry>
    <title>随记</title>
    <link href="https://lawliet-lee.github.io/2022/11/17/%E4%BD%9C%E4%B8%BA%E6%84%8F%E5%BF%97%E5%92%8C%E8%A1%A8%E8%B1%A1%E7%9A%84%E4%B8%96%E7%95%8C01/"/>
    <id>https://lawliet-lee.github.io/2022/11/17/%E4%BD%9C%E4%B8%BA%E6%84%8F%E5%BF%97%E5%92%8C%E8%A1%A8%E8%B1%A1%E7%9A%84%E4%B8%96%E7%95%8C01/</id>
    <published>2022-11-17T02:15:52.222Z</published>
    <updated>2022-11-17T06:08:02.946Z</updated>
    
    <content type="html"><![CDATA[<p>我们既已在无知无识的自然界看到大自然的内在本质就是不断的追求挣扎，无目标无休止的追求挣扎；那么，在我们考察动物和人的时候，这就更明显地出现在我们眼前了。欲求和挣扎是人的全部本质，完全可以和不能解除的口渴相比拟。但是一切欲求的基地却是需要，缺陷，也就是痛苦；所以，人从来就是痛苦的，由于他的本质就是落在痛苦的手心里的。如果相反，人因为他易于获得的满足随即消除了他的可欲之物而缺少了欲求的对象，那么，可怕的空虚和无聊就会袭击他，即是说人的存在和生存本身就会成为他不可忍受的重负。所以人生是在痛苦和无聊之间像钟摆一样的来回摆动着；事实上痛苦和无聊两者也就是人生的两种最后成分。下面这一事实很奇特地，也必然地道破这一点：在人们把一切痛苦和折磨都认为是地狱之后，给天堂留下来的除闲着无聊之外就再也没有什么了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;我们既已在无知无识的自然界看到大自然的内在本质就是不断的追求挣扎，无目标无休止的追求挣扎；那么，在我们考察动物和人的时候，这就更明显地出现在我们眼前了。欲求和挣扎是人的全部本质，完全可以和不能解除的口渴相比拟。但是一切欲求的基地却是需要，缺陷，也就是痛苦；所以，人从来就是痛</summary>
      
    
    
    
    <category term="作为意志和表象的世界" scheme="https://lawliet-lee.github.io/categories/%E4%BD%9C%E4%B8%BA%E6%84%8F%E5%BF%97%E5%92%8C%E8%A1%A8%E8%B1%A1%E7%9A%84%E4%B8%96%E7%95%8C/"/>
    
    
  </entry>
  
  <entry>
    <title>EVA01</title>
    <link href="https://lawliet-lee.github.io/2022/10/20/EVANGELION/"/>
    <id>https://lawliet-lee.github.io/2022/10/20/EVANGELION/</id>
    <published>2022-10-20T08:17:11.043Z</published>
    <updated>2022-11-21T09:15:15.731Z</updated>
    
    <content type="html"><![CDATA[<p>谨以此文献给我所热爱的EVA</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;谨以此文献给我所热爱的EVA&lt;/p&gt;
</summary>
      
    
    
    
    <category term="EVA" scheme="https://lawliet-lee.github.io/categories/EVA/"/>
    
    
  </entry>
  
  <entry>
    <title>开端</title>
    <link href="https://lawliet-lee.github.io/2022/10/20/%E6%9D%82%E8%B0%88%E6%96%87%E4%BB%B6%E5%90%8D/"/>
    <id>https://lawliet-lee.github.io/2022/10/20/%E6%9D%82%E8%B0%88%E6%96%87%E4%BB%B6%E5%90%8D/</id>
    <published>2022-10-20T08:17:11.043Z</published>
    <updated>2022-11-21T09:24:07.200Z</updated>
    
    <content type="html"><![CDATA[<p>测试图片<img src="../../../../images/banner-dark.jpg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;测试图片&lt;img src=&quot;../../../../images/banner-dark.jpg&quot;&gt;&lt;/p&gt;
</summary>
      
    
    
    
    <category term="杂谈" scheme="https://lawliet-lee.github.io/categories/%E6%9D%82%E8%B0%88/"/>
    
    
  </entry>
  
  <entry>
    <title>睡眠排序 go-sleep</title>
    <link href="https://lawliet-lee.github.io/2022/10/20/go-sleep/"/>
    <id>https://lawliet-lee.github.io/2022/10/20/go-sleep/</id>
    <published>2022-10-20T02:07:55.224Z</published>
    <updated>2022-11-23T02:48:13.657Z</updated>
    
    <content type="html"><![CDATA[<p>时间复杂度O(1)的排序</p><p>第一种</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//睡眠排序</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   b := [<span class="number">7</span>]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">   <span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line">   <span class="keyword">for</span> _, v := <span class="keyword">range</span> b &#123;</span><br><span class="line">      wg.Add(<span class="number">1</span>)</span><br><span class="line">      v := v</span><br><span class="line">      <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">         <span class="keyword">defer</span> wg.Done()</span><br><span class="line">         output(v)</span><br><span class="line">      &#125;()</span><br><span class="line">   &#125;</span><br><span class="line">   wg.Wait()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">output</span><span class="params">(v <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">   time.Sleep(time.Duration(v) * time.Second)</span><br><span class="line">   fmt.Println(v)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二种</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="comment">//睡眠排序</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> done = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">bool</span>, <span class="number">7</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">b := [<span class="number">7</span>]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> b &#123;</span><br><span class="line"><span class="keyword">go</span> output(v)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(done) == <span class="number">7</span> &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">output</span><span class="params">(v <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">time.Sleep(time.Duration(v) * time.Second)</span><br><span class="line">fmt.Println(v)</span><br><span class="line">done &lt;- <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;时间复杂度O(1)的排序&lt;/p&gt;
&lt;p&gt;第一种&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;l</summary>
      
    
    
    
    <category term="GO" scheme="https://lawliet-lee.github.io/categories/GO/"/>
    
    
  </entry>
  
</feed>
